// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalDietetycznyAPI.Infrastructure.Context;

#nullable disable

namespace PortalDietetycznyAPI.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20241009193413_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.BlogPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogPostId")
                        .HasColumnType("integer");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId")
                        .IsUnique();

                    b.ToTable("BlogPhotos");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Uid")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Uid");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("Kcal")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("StoredFileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoredFileId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.DietPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DietId")
                        .HasColumnType("integer");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DietId")
                        .IsUnique();

                    b.ToTable("DietPhotos");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.DietTag", b =>
                {
                    b.Property<int>("DietId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("DietId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DietTags");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DietsNames")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasInvoice")
                        .HasColumnType("boolean");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("Uid")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Uid");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HomeUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("HomeUnitValue")
                        .HasColumnType("real");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("UnitValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.RecipePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.RecipeTag", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipeTags");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.StoredFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DropboxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FileType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Context")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.BlogPhoto", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.BlogPost", "BlogPost")
                        .WithOne("Photo")
                        .HasForeignKey("PortalDietetycznyAPI.Domain.Entities.BlogPhoto", "BlogPostId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Diet", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Invoice", null)
                        .WithMany("Diets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Order", null)
                        .WithMany("Diets")
                        .HasForeignKey("OrderId");

                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.StoredFile", "File")
                        .WithMany()
                        .HasForeignKey("StoredFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.DietPhoto", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Diet", "Diet")
                        .WithOne("Photo")
                        .HasForeignKey("PortalDietetycznyAPI.Domain.Entities.DietPhoto", "DietId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.DietTag", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Diet", "Diet")
                        .WithMany("DietTags")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Tag", "Tag")
                        .WithMany("DietTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Invoice", b =>
                {
                    b.OwnsOne("PortalDietetycznyAPI.Domain.Entities.InvoiceParty", "Buyer", b1 =>
                        {
                            b1.Property<int>("InvoiceId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Nip")
                                .HasColumnType("integer");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("PortalDietetycznyAPI.Domain.Entities.InvoiceParty", "Seller", b1 =>
                        {
                            b1.Property<int>("InvoiceId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Nip")
                                .HasColumnType("integer");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.Navigation("Buyer")
                        .IsRequired();

                    b.Navigation("Seller")
                        .IsRequired();
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Invoice", "Invoice")
                        .WithOne()
                        .HasForeignKey("PortalDietetycznyAPI.Domain.Entities.Order", "InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Recipe", b =>
                {
                    b.OwnsOne("PortalDietetycznyAPI.Domain.Entities.NutritionInfo", "Nutrition", b1 =>
                        {
                            b1.Property<int>("RecipeId")
                                .HasColumnType("integer");

                            b1.Property<int>("Carb")
                                .HasColumnType("integer");

                            b1.Property<int>("Fat")
                                .HasColumnType("integer");

                            b1.Property<int>("Fiber")
                                .HasColumnType("integer");

                            b1.Property<int>("Kcal")
                                .HasColumnType("integer");

                            b1.Property<int>("Protein")
                                .HasColumnType("integer");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipe");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.RecipePhoto", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Recipe", "Recipe")
                        .WithOne("Photo")
                        .HasForeignKey("PortalDietetycznyAPI.Domain.Entities.RecipePhoto", "RecipeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.RecipeTag", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Recipe", "Recipe")
                        .WithMany("RecipeTags")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Tag", "Tag")
                        .WithMany("RecipeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.StoredFile", b =>
                {
                    b.HasOne("PortalDietetycznyAPI.Domain.Entities.Order", null)
                        .WithMany("StoredFiles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.BlogPost", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Diet", b =>
                {
                    b.Navigation("DietTags");

                    b.Navigation("Photo")
                        .IsRequired();
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Diets");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("Diets");

                    b.Navigation("StoredFiles");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Photo");

                    b.Navigation("RecipeTags");
                });

            modelBuilder.Entity("PortalDietetycznyAPI.Domain.Entities.Tag", b =>
                {
                    b.Navigation("DietTags");

                    b.Navigation("RecipeTags");
                });
#pragma warning restore 612, 618
        }
    }
}
